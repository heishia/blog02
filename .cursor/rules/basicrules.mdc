---
alwaysApply: true
---
코딩 규칙 정리



#디버그 로그 프린트 규칙


1.기본적으로 터미널에서는 짧은 프린트만 표시, 긴 응답같은 경우 log에 남깁니다.
1. 로깅설정 : logs 폴더에 "모듈명+타임스탬프" 형식 저장 타임스탬프는 8월 3일 7시 4분을 = 08030704 "분"까지만 작성.
3.프린트문에는 절대 이모티콘 같은 걸 넣지 않고 심플하게 의미만 전달해주세요.
2. API 요청시 어떤 API를 요청했고 받은 응답 전체를 변경없이 표시해주세요.


#네이밍 규칙

1.반드시 의미를 쉽게 알수 있는 짧은 직관적인 이름으로 작성하세요.
2.사용자가 프롬프트에 사용하는 단어를 영어로 표현하면 됩니다.
3.그리고 같은 개념과 값을 가진 네임은 한프로젝트 폴더 내에서 이름을 변경하지 않습니다.


변수/함수 이름 → snake_case

클래스 이름 → CamelCase

상수 이름 → 대문자 + 언더바 (예: MAX_RETRY)

파일이름 → {{메인기능동사or메인 명사}} 예: 황금키워드를 추출하는 툴 = gold.py
크롤링하여 키워드를 확장하는 툴 = crawler.py



# 상수/매직넘버 규칙 

코드 안에 직접 숫자를 쓰지 말고 코드 맨위에서 관리할 수 있게 따로 분리합니다. 

#API 호출 규칙

요청/응답을 전체를 반드시 로그에 텍스트 파일형태로 기록합니다. 터미널에는 간략하게 표시합니다.



#함수설계 규칙 

하나의 함수는 반드시 하나의 역할만 하게 설계합니다. (단일책임)

#조건문/반복문 규칙

코드의 가독성을 위해서 조건문 반복문은 중첩을 최소화해주세요. 또한 조기리턴을 적극 활용하세요.


#주석/Docstring 규칙

1.Docstring 규칙

함수/클래스/모듈의 첫 줄에는 무조건 Docstring 달아주세요.

요약 (한 줄 설명)

Args (매개변수 설명)

Returns (반환값 설명)

2. 주석 규칙

사용자가 질문한 내용들을 위주로 왜 코드를 이렇게 작성했는지를 중점으로 짧게 기록합니다.

한 줄 주석: 코드 옆에 짧게 → # 뒤에 한 칸 띄우기

블록 주석: 여러 줄 설명 → 위에 달기

#테스트/디버그 규칙 
사용자가 디버깅을 위해 테스트를 요청하면, 문제가 생기는 범위의 함수 부분을 최소한 단위로 pytest를 이용해 간결하게 테스트 코드를 작성해주세요

#try/except 규칙

에러 메시지를 명확히 하세요.

그냥 "에러 발생" 이라고만 하지 말고, 원인 + 맥락을 알려주세요.

예: "파일 읽기 실패: 경로=./data.csv, 오류=FileNotFoundError”
